@startuml AttendanceReports
participant Client #64D1AF
participant App.tsx
participant reports.controller.ts

Client -> App.tsx : "/reports/:userId/attendance" in GET Method

activate Client #D3D3D3
activate App.tsx #D3D3D3

reports.controller.ts -> reports.controller.ts : import fs from "fs" // file system module 
reports.controller.ts -> reports.controller.ts : const S3 = require("aws-sdk/clients/s3")
utility.ts -> utility.ts : import **XLXS** from "xlxs"

App.tsx -> reports.controller.ts : request hit on the reports controller

activate reports.controller.ts #D3D3D3

alt case :req.params.userId is undefined
    reports.controller.ts -> reports.controller.ts : !req.params.userId
    activate  reports.controller.ts #D16587
        App.tsx <-- reports.controller.ts : status: 400,\njson: {message: invalid_user_id}
    deactivate reports.controller.ts
end

reports.controller.ts -> reports.controller.ts : Declare a variable **path** and \ncall **generateDailyAttendanceReport()** method with **userId**

activate reports.controller.ts #D16587
reports.controller.ts -> utility.ts : **generateDailyAttendanceReport(req.params.userId)**
activate utility.ts #D3D3D3
utility.ts -> utility.ts : create an instance for **ReportGenerator** class with userId \nand assign it to **reportGenerator** variable
utility.ts -> utility.ts : declare a variable **report** and call  \n**reportGenerator.generateLastWorkingDayAttendanceReport()** \nand assign the return value to it.
utility.ts -> ReportGenerator.ts : **generateLastWorkingDayAttendanceReport()**
activate ReportGenerator.ts #D3D3D3

ReportGenerator.ts -> ReportGenerator.ts : declare a **lastWorkingDate** variable \nand call **getLastWorkingDate()** method \nand assign value to it

activate ReportGenerator.ts #D16587
    ReportGenerator.ts -> ReportGenerator.ts : declare a **currentDate** and assign value new Date();
    ReportGenerator.ts -> ReportGenerator.ts : declare a **lastWorkingDate** and assign the parsed value \nof **currentDate.getTime()** to it.
    alt #0000001a **lastWorkingDate** is monday
        ReportGenerator.ts -> ReportGenerator.ts : set **lastWorkingDate** to previous friday and return the \n**lastWorkingDate**
    else #FFFFFF
        ReportGenerator.ts -> ReportGenerator.ts : set **lastWorkingDate** to as yesterday and return the \n**lastWorkingDate**
    end
deactivate ReportGenerator.ts

ReportGenerator.ts -> ReportGenerator.ts : declare a variable **report** and call \n**generateAttendanceReportFor method with lastWorkingDate** \nand assign the value to it
activate ReportGenerator.ts #D16587
    ReportGenerator.ts -> ReportGenerator.ts : declare a **targetUser** and create an\nAPI gateway and fetch userdetails and assign to it
    ReportGenerator.ts -> BackendUserService : "/users/:userId" in GET Method
    activate BackendUserService #D3D3D3
        ReportGenerator.ts <-- BackendUserService : return **MicrosoftUser**
    deactivate BackendUserService
    alt #0000001a targetUser is undefined 
        ReportGenerator.ts -> ReportGenerator.ts : return null
    else #FFFFFF
        ReportGenerator.ts -> ReportGenerator.ts : declare a variable **reports** as **AttendanceReport[]** type with []
        loop let userId of **targetUser.reportings**
            ReportGenerator.ts -> ReportGenerator.ts : declare a variable **userReports** and call \n**generateUserAttendanceReport** with userId and date, \nthen assign the returned value to it
            activate ReportGenerator.ts
                ReportGenerator.ts -> ReportGenerator.ts : declare a variable **user** and create an API gateway \nand get user details with userId
                ReportGenerator.ts -> BackendUserService : "/users/:userId" in GET Method
                activate BackendUserService 
                    ReportGenerator.ts <-- BackendUserService : return MicrosoftUser
                deactivate BackendUserService
                ReportGenerator.ts -> ReportGenerator.ts : declare a variable **userAttendance** and create an API gateway \nand get attendance status with userId and date
                ReportGenerator.ts -> BackendUserService : "/attendance?date=**date**&userId=**userId**" in GET Method
                activate BackendUserService 
                    ReportGenerator.ts <-- BackendUserService : return string
                deactivate BackendUserService
                ReportGenerator.ts -> ReportGenerator.ts : return {\n\tName: user.name, \n\tDomain: user.practice,\n\tAttendance: userAttendance ? userAttendance.attendance_status : "No Show", \n} as **AttendanceReport**
            deactivate ReportGenerator.ts
            ReportGenerator.ts -> ReportGenerator.ts : push the **userReport** to **reports** array
        end
        ReportGenerator.ts -> ReportGenerator.ts : return **reports** as **AttendanceReport[]**
    end
deactivate ReportGenerator.ts

alt #0000001a **report** is undefined 
    utility.ts <-- ReportGenerator.ts : return null
else #FFFFFF
    utility.ts <-- ReportGenerator.ts : return **report** as **AttendanceReport[]**
end

deactivate ReportGenerator.ts

alt #0000001a report is undefined
    reports.controller.ts <-- utility.ts : return ""
else #FFFFFF
    utility.ts -> utility.ts : declare a variable **exportedPath** and call **convertJsonToExcel with report and "Daily_attendance_reports"** \nand assign value to it
    activate utility.ts #D16587
        utility.ts -> utility.ts : declare a variable **reportWorkSheet** and\nusing the **XLXS.utils.json_to_sheet method with report** \nand assign value to it
        utility.ts -> utility.ts : declare a variable **workbook** and\nusing the **XLXS.utils.book_new method** \nand assign it variable
        utility.ts -> utility.ts : using **XLXS.utils.book_append_sheet(workbook, reportWorkSheet, fileName)** \nwhich is to append the book with sheet in a xl sheet
        utility.ts -> utility.ts : create a variable **path** and assign string like **"/tmp/"+fileName+"_" + new Date().getTime() + ".xlsx"**
        utility.ts -> utility.ts : using **XLXS.writeFile(workbook, path)** \nwhich is write the content into xl sheet with above data
        utility.ts -> utility.ts : return **path**
    deactivate utility.ts
    reports.controller.ts <-- utility.ts : return **exportedPath**
    deactivate utility.ts
end

reports.controller.ts -> reports.controller.ts : returned string is assigned to **path** variable 

deactivate reports.controller.ts

reports.controller.ts -> reports.controller.ts : declare a variable **blob** and assign the \nvalue returned from **fs.readFileSync(path)**

reports.controller.ts -> reports.controller.ts : decalre a variable **key** and assign string value like \n**"reports/attendance-report-" + Date.now().toString()+ ".xlsx"**

note right of reports.controller.ts : fileUploadParams : { \n\tBucket: {BUCKET NAME},\n\tBody: **blob**,\n\tKey: **key**,\n }

reports.controller.ts -> reports.controller.ts : create a new S3 connection with {apiVersion: "2006-03-01"} and \nuse the putObject as fileUploadParams and promise()

App.tsx <-- reports.controller.ts : json: {path: **"https://ava-hive-np-todo.s3.us-east-2.amazonaws.com/"+key**}

deactivate ReportGenerator.ts
deactivate utility.ts

deactivate reports.controller.ts


Client <-- App.tsx : return response

deactivate App.tsx
deactivate Client
@enduml
