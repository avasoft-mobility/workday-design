@startuml getHiveTodos
participant Client #64D1AF
participant app.ts
participant todos.controller.ts
participant todos.service.ts

Client -> app.ts : "/todos"
activate Client #D3D3D3
activate app.ts #D3D3D3

app.ts -> todos.controller.ts : (**GET**) "/hive"
activate todos.controller.ts #D3D3D3

todos.controller.ts -> todos.controller.ts : create a new variable **userId** and \nstore the userId from uri query
todos.controller.ts -> todos.controller.ts : create a new variable **date** and \nstore the date from uri query
todos.controller.ts -> todos.service.ts : **getHiveTodos(userId, date)**
activate todos.service.ts #D3D3D3

alt if userId is null
    todos.controller.ts <-- todos.service.ts : return ServiceResponse<HiveTodo[]>\n(code: 400, message: "User Id is required")
end

alt if date is null
    todos.controller.ts <-- todos.service.ts : return ServiceResponse<HiveTodo[]>\n(code: 400, message: "Date is required")
end

todos.service.ts -> todos.service.ts
note right of todos.service.ts: create a new variable **defaultTags** and \ncall **getCommonTags()** \n**Refer getCommonTags method in tag_service technical design** \nthen assign the reponse to the  **defaultTags** variable

todos.service.ts -> todos.service.ts
note right of todos.service.ts: create a new variable **todos** and \ncall **getTodosByDate()** \n**Refer getTodosByDate method in todos_service technical design** \nthen assign the reponse to the  **todos** variable

loop todos
    todos.service.ts -> todos.service.ts: loop the todos and form a new object structure \nfor each todo like below and then\nstore the each result in the new variable **hiveTodos**
    note right of todos.service.ts:{ \nuser_id: todo.microsoftUserId, \nwork_item: todo.title, \nestimated_hours: todo.eta, \nactual_hours: todo.ata, \ndue_date: moment(todo.date).format("YYYY-MM-DD"), \nstatus: todo.status, \ntags: **fetchTodoDefaultTags(todo.tags ? todo.tags : [], defaultTags)**} \n**Refer fetchTodoDefaultTags method technical design**
end

todos.service.ts --> todos.controller.ts: return ServiceResponse<HiveTodo[]>\n(code: 200, body: hiveTodos)
deactivate todos.service.ts

app.ts <-- todos.controller.ts: return ServiceResponse<HiveTodo[]>
deactivate todos.controller.ts

Client <-- app.ts : return ServiceResponse<HiveTodo[]>
deactivate app.ts
@enduml
