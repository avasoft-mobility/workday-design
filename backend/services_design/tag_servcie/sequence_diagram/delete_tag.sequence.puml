@startuml delete tag
participant Client #64D1AF
participant app.ts
participant tags.controller.ts
participant tags.service.ts
participant DB #FFC0CB

Client -> app.ts : "/tags"
activate Client #D3D3D3
    activate app.ts #D3D3D3
        app.ts -> tags.controller.ts : (**DELETE**) "/:tagId"
        activate tags.controller.ts #D3D3D3
            tags.controller.ts -> tags.controller.ts : get tagId from req.params\n and save that in a variable\n called **tagId**
            tags.controller.ts -> tags.controller.ts : get userId from req.query["userId"]\n and save that in a variable\n called **userId**
            tags.controller.ts -> tags.service.ts : deleteTagById(tagId, userId)
            activate tags.service.ts #D3D3D3
                alt case : tagId is undefined (!tagId)
                    tags.controller.ts <-- tags.service.ts :  code: 400,\n message: "tagid is required"
                end
                alt case : tagId is not the valid object id\n (!mongoose.isValidObjectId(tagId))
                    tags.controller.ts <-- tags.service.ts : code: 400,\n message: "Tag Id is not valid"
                end
                alt case : userId is undefined (!userId)
                    tags.controller.ts <-- tags.service.ts :  code: 400,\n message: "userId is required"
                end
                tags.service.ts -> DB : tags.find({\n$and: [\n{ _id: new mongoose.Types.ObjectId(tagId.toString()) },\n{ microsoftUserId: `${userId}` },],\n})
                activate DB #D3D3D3
                    tags.service.ts <-- DB : Tag
                deactivate DB
                tags.service.ts -> tags.service.ts : get the Tag response and save\n that in a variable called **tag**
                alt case : **tag** length is 0(tag.length === 0)
                    tags.controller.ts <-- tags.service.ts : code: 404,\n message: "TagId and Microsoft UserId is not matching" 
                end
                tags.service.ts -> DB : tags.findByIdAndDelete({\n_id: new mongoose.Types.ObjectId(tagId.toString()),\n})
                activate DB #D3D3D3
                    tags.service.ts <-- DB : Tag
                deactivate DB
                tags.service.ts -> tags.service.ts : get the tag response\n and save it in a\n variable called **response**
                alt case : **response** is undefined (!response)
                    tags.controller.ts <-- tags.service.ts : code: 404,\n message: "No tag found to delete"
                end
                tags.controller.ts <-- tags.service.ts : code: 200,\n message: "Deleted successfully",\n body: response
            deactivate tags.service.ts
            alt case : response.code is greater\n than 404
                app.ts <-- tags.controller.ts : code :response.code\n message: response.message
            end
             app.ts <-- tags.controller.ts : code : response.code\n message: response.message
        deactivate tags.controller.ts
        Client <-- app.ts : code : response.code\n message: response.message
    deactivate app.ts
deactivate Client
@enduml