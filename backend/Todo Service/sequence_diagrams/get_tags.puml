@startuml Get Tag
participant Client #64D1AF
participant app.ts
participant tags.controller.ts
participant tags.service.ts
participant usersService.ts 
participant DB #FFC0CB

Client -> app.ts : "/tags"
activate Client #D3D3D3
activate app.ts #D3D3D3
app.ts -> tags.controller.ts : (**GET**) "/"
activate tags.controller.ts #D3D3D3
tags.controller.ts -> tags.controller.ts : get userId from\n req.query.userId\n and save it in a\n variable called **userId**
tags.controller.ts -> tags.service.ts :  getTags(userId)
activate tags.service.ts #D3D3D3
alt case: userId is\n not available(!userId)
    tags.service.ts -> tags.service.ts : getAllTags()
    activate tags.service.ts #D16587
        tags.service.ts -> DB :tags.find()
        activate DB #D3D3D3 
            tags.service.ts <-- DB : Tag[]
        deactivate DB
        tags.service.ts -> tags.service.ts : save the return response\n in a variable called **tag**
        alt case : no tags available (!tags)
            tags.service.ts -> tags.service.ts : code: 404,\n message: "No tags found" 
        else case : tags available (tags)
            tags.service.ts -> tags.service.ts :message: "successful", code: 200, body: tag
        end
        tags.controller.ts <-- tags.service.ts : TagResponse
    deactivate tags.service.ts

end

alt case: userId is\n available(userId)
    tags.service.ts -> tags.service.ts : getTagsByUserId(userId)
    activate tags.service.ts #D16587
        tags.service.ts -> usersService.ts : `/users/${userId}/managers`
        activate usersService.ts #D3D3D3
            tags.service.ts <-- usersService.ts : MicrosoftUser[]
        deactivate usersService.ts
        tags.service.ts -> tags.service.ts : save the return response in the \n variable called **managers**
        loop map managers
        tags.service.ts -> tags.service.ts : loop the **managers** and\n store each MicrosoftUser\n userId in a variable called\n **managerIds** 
        end
        tags.service.ts -> tags.service.ts : declare a new variable\n called **queryResult** as **Tag[]**\n and assign the default value as []
        tags.service.ts -> DB : tags.find({ microsoftUserId: { $exists: false } })
        activate DB #D3D3D3
            tags.service.ts <-- DB: Tags[]
        deactivate DB 
        tags.service.ts -> tags.service.ts : Take the return Tags[] and\n save it in a variable called\n **commontags**
        alt  case: commontags is defined
            loop map commontags
                tags.service.ts -> tags.service.ts : loop the **commontags** \nand set the type as **default**
            end
        end

        tags.service.ts -> DB:  tags.find({$and: [{ microsoftUserId: { $in: managerIds } }\n, { type: { $eq: "team" } }],})
        activate DB #D3D3D3
            tags.service.ts <-- DB: Tags[]
        deactivate DB 
        tags.service.ts -> tags.service.ts : Take the return Tags[] and\n save it in a variable called\n **teamTags**

         tags.service.ts -> DB : tags.find({ microsoftUserId: { $eq: userId } })
        activate DB #D3D3D3
            tags.service.ts <-- DB: Tags[]
        deactivate DB 
        tags.service.ts -> tags.service.ts : Take the return Tags[] and\n save it in a variable called\n **userTags**
        loop map commontags
            tags.service.ts -> tags.service.ts : loop the **userTags** \nand set the type as **user**
        end

        tags.service.ts -> tags.service.ts : now push **commontags**,**teamTags** \n **userTags** in **queryResult**

        alt case: queryResult is empty\n(queryResult.length === 0)
            tags.service.ts -> tags.service.ts :  code: 404,\n message: "No tags found" 
        else case: queryResult is not empty\n(queryResult.length !== 0)
            tags.service.ts -> tags.service.ts :  message: "successful",\n code: 200,\n body: queryResult

        end
    tags.controller.ts <-- tags.service.ts : TagResponse
    deactivate tags.service.ts
    deactivate tags.service.ts
end
tags.controller.ts -> tags.controller.ts : get the return TagResponse\n and save it in avariable\n called **response**.
alt case : reponse.code is 400
app.ts <-- tags.controller.ts : status : response.code,\n message: response.message.
end
Client <-- app.ts: response.code,\n message: response.message.
app.ts <-- tags.controller.ts : status:201,\n message: response.data
deactivate tags.controller.ts
Client <-- app.ts: status:201,\n message: response.data

deactivate app.ts
deactivate Client
@enduml