@startuml getCommonTags
participant Client #64D1AF
participant app.ts
participant commonTags.controller.ts
participant commonTags.service.ts
participant DB #FFC0CB

Client -> app.ts : "/tags/private/common"
activate Client #D3D3D3
activate app.ts #D3D3D3

app.ts -> commonTags.controller.ts : (**PUT**) "/:tagId"\nstore tag name from body in \nvariable tagName
activate commonTags.controller.ts #D3D3D3

commonTags.controller.ts -> commonTags.service.ts : **editCommonTag(tagId, tagName)**
activate commonTags.service.ts #D3D3D3

alt !tagId
    commonTags.controller.ts <-- commonTags.service.ts : return CommonTagResponse\n(message: "Tag Id required", code: 400)
end

alt !isValidObjectId(tagId)
    commonTags.controller.ts <-- commonTags.service.ts : return CommonTagResponse\n(code: 400, message: "Id is not valid")
end

alt !tagName
    commonTags.controller.ts <-- commonTags.service.ts : return CommonTagResponse\n(message: "Tag name required", code: 400)
end

commonTags.service.ts -> DB : tags.findById(query)
activate DB #D3D3D3
note right of DB: query: { _id: tagId }
commonTags.service.ts <-- DB : return Tag\nstore the Tag object in variable tag
deactivate DB

alt tag
    commonTags.service.ts -> DB : tags.findByIdAndUpdate(query)
    activate DB #D3D3D3
    note right of DB: query: { tagId, { tagName: newTagName} }
    commonTags.service.ts <-- DB : return Tag object \nstore it in a variable reponse
    deactivate DB
    commonTags.controller.ts <-- commonTags.service.ts : return CommonTagResponse\n(body: response, message: "Updated Successfully", code: 200)
end

alt !tag
    commonTags.controller.ts <-- commonTags.service.ts : return CommonTagResponse\n(message: "Id not exist", code: 404)
end
deactivate commonTags.service.ts

app.ts <-- commonTags.controller.ts: return CommonTagResponse
deactivate commonTags.controller.ts

Client <-- app.ts : return CommonTagResponse
deactivate app.ts
@enduml
